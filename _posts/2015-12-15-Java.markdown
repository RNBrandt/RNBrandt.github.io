---
layout: post
title:  "JavaStick"
date:   2015-12-15 08:43:59
author: Reuben Brandt
categories: Java DBC
tags:
---

A friend of mine once described the difference between JavaScript and Ruby as the difference between driving a stick-shift car and an automatic, and nowhere is that more clear than in looping.

In Ruby, in order to loop you simply have to choose the method through with you want to loop (eg. Each, for, while, etc …), connect it with your object, and that’s really it. So looping though a simple array in Ruby would look something like this:

array = (1,2,3,4,5)

array.each {|variable| variable +=1}

JavaScript on the other hand forces you to break it apart.

There isn’t a simple ‘each’ function in JavaScript. Instead, if you want to loop through each value in an array, you need to think about that as a separate problem to work through.

You know JavaScript keeps track of an index, good. You can call objects by their index, good. You can assign variables numerical values, and can change those values based on certain circumstances, good. JavaScript will stop the loop when certain circumstances are met, good.

Based on that you know you can create a variable which represents the number of values in the array (an index variable), and will move from one value to the next, using the index variable. If you set a termination condition (eg. When the index variable is equal to the number of elements), the loop will reach that condition and stop, and you will have iterated over each element in your array. Using the same array as above, that would look something like this:

array = (1,2,3,4,5)

for (i = 0; i < array.length; i++){ array[i] += 1;}

So the i variable is what’s keeping track of where the program is in the loop, and as long as i < array.length, the loop will continue. A bit more stick-shifty than Ruby, eh…